### 57. Insert Interval (Medium)

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

```
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
```
Example 2:

```
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
```
Example 3:

```
Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]
```
Example 4:

```
Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]
```
Example 5:

```
Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]
```

Constraints:

- 0 <= intervals.length <= 10^4
- intervals[i].length == 2
- 0 <= intervals[i][0] <= intervals[i][1] <= 10^5
- intervals is sorted by intervals[i][0] in ascending order.
- newInterval.length == 2
- 0 <= newInterval[0] <= newInterval[1] <= 10^5

```
// Time: O(N)
// Space: O(N)
class Solution 1 {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        if (intervals.empty()) return {newInterval};
        const int n = intervals.size();
        vector<vector<int>> res;
        int i = 0;
        while (i < n && intervals[i][1] < newInterval[0]) res.push_back(intervals[i++]);
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i++][1]);
        }
        res.push_back(newInterval);
        while (i < n) res.push_back(intervals[i++]);
        return res;
    }
};

// Time: O(N)
// Space: O(N)
// Binary search
class Solution 2 {
public:
    int n;
    int upp_bound(const vector<vector<int>>& intervals, int t) {
        int l = 0, r = n;
        while(l < r) {
            int m = l + (r - l) / 2;
            if (intervals[m][0] <= t) l = m + 1;
            else r = m;
        }
        return r;
    }
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        if (intervals.empty()) return {newInterval};
        n = intervals.size();
        const int up = upp_bound(intervals, newInterval[0]);
        intervals.insert(intervals.begin() + up, newInterval);
        vector<vector<int>> res;
        res.push_back(intervals[0]);
        for (int i = 1, j = 1; i <= n; ++i) {
            if (intervals[i][0] <= res[j-1][1]) res[j-1][1] = max(res[j-1][1], intervals[i][1]);
            else {
                res.push_back(intervals[i]);
                j++;
            }
        }
        return res;
    }
};
```
